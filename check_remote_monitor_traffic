#!/usr/bin/env python3
"""
This check command reads the stats file populated by the
monitor_traffic script.
"""
from argparse import ArgumentParser, Namespace
from subprocess import check_output
import sys


def main(arguments: Namespace):
    # make sure that the monitor_traffic process is running
    _run_remote_command(
        arguments,
        '(ps aux | grep monitor_traffic | grep -vq grep) || (./monitor_traffic &)')

    output = _run_remote_command(arguments, ' '.join([
        'cat',
        '/tmp/traffic_stats',
    ]))
    output = [line.decode() for line in output.splitlines()]
    output = list(filter(
        lambda line: line.split()[0] == arguments.interface,
        output))
    if len(output) != 1:
        raise AssertionError('invalid interface')
    output = output[0]

    # bytes means actually KiB
    in_bytes, out_bytes = (int(value) / 1024 for value in output.split()[1:])

    print('Traffic for {interface} -- Rx: {in_bytes:.2f} KB/s // Tx: {out_bytes:.2f} KB/s'.format(
        interface=arguments.interface,
        in_bytes=in_bytes,
        out_bytes=out_bytes))

    if in_bytes > arguments.critical_in * 1000:
        sys.exit(2)
    elif in_bytes > arguments.warning_in * 1000:
        sys.exit(1)

    if out_bytes > arguments.critical_out * 1000:
        sys.exit(2)
    elif out_bytes > arguments.warning_out * 1000:
        sys.exit(1)


def _run_remote_command(arguments: Namespace, command: str) -> str:
    """
    Do not pass untrusted input to this method! The remote command
    uses a full (remote) shell for evaluation!
    """
    local_command = [
        'ssh',
    ]
    if arguments.port:
        local_command += ['-p', arguments.port]
    if arguments.ssh_key:
        local_command += ['-i', arguments.ssh_key]
    local_command += [
        arguments.remote,
        command,
    ]
    return check_output(local_command)


if __name__ == '__main__':
    parser = ArgumentParser()

    parser.add_argument('-r', '--remote', required=True,
        help='Remote SSH host (and optionally user, i.e., user@host)')
    parser.add_argument('-p', '--port',
        help='Remote SSH port')
    parser.add_argument('-s', '--ssh-key',
        help='Path to the private SSH key file')

    parser.add_argument('-i', '--interface', required=True,
        help='Interface to measure (e.g. eth0)')
    parser.add_argument('-d', '--delay', default=60, type=int,
        help='Delay to measure in seconds. The average traffic over that period will be printed.')

    parser.add_argument('--warning-in', default=60, type=float,
        help='MB/s Tx warning threshold.')
    parser.add_argument('--critical-in', default=65, type=float,
        help='MB/s Tx warning threshold.')

    parser.add_argument('--warning-out', default=60, type=float,
        help='MB/s Rx warning threshold.')
    parser.add_argument('--critical-out', default=65, type=float,
        help='MB/s Rx warning threshold.')

    main(parser.parse_args())
