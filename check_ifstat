#!/usr/bin/env python3
from argparse import ArgumentParser, Namespace
from subprocess import check_output
import sys


def main(arguments: Namespace):
    output = check_output([
        'ifstat',
        '-i',
        arguments.interface,
        str(arguments.delay),
        '1'
    ]).splitlines()[-1].decode()
    in_bytes, out_bytes = (float(value) for value in output.split())

    print('Traffic for {interface} -- Rx: {in_bytes} KB/s // Tx: {out_bytes} KB/s'.format(
        interface=arguments.interface,
        in_bytes=in_bytes,
        out_bytes=out_bytes))

    if in_bytes > arguments.critical_in * 1000:
        sys.exit(2)
    elif in_bytes > arguments.warning_in * 1000:
        sys.exit(1)

    if out_bytes > arguments.critical_out * 1000:
        sys.exit(2)
    elif out_bytes > arguments.warning_out * 1000:
        sys.exit(1)


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('-i', '--interface', required=True,
        help='Interface to messure (e.g. eth0)')
    parser.add_argument('-d', '--delay', default=60, type=int,
        help='Delay to measure in seconds. The average traffic over that period will be printed.')

    parser.add_argument('--warning-in', default=60, type=float,
        help='MiB/s Tx warning threshold.')
    parser.add_argument('--critical-in', default=65, type=float,
        help='MiB/s Tx warning threshold.')

    parser.add_argument('--warning-out', default=60, type=float,
        help='MiB/s Rx warning threshold.')
    parser.add_argument('--critical-out', default=65, type=float,
        help='MiB/s Rx warning threshold.')

    main(parser.parse_args())
